#title: README.org
#+property: header-args :mkdirp yes :results verbatim

* Setup

** clab topology
#+begin_src yaml :tangle frrclab.clab.yaml
name: frrlab

topology:
  nodes:
    router1:
      kind: linux
      image: quay.io/frrouting/frr:9.0.0
      binds:
        - router1/daemons:/etc/frr/daemons
        - router1/frr.conf:/etc/frr/frr.conf
    router2:
      kind: linux
      image: quay.io/frrouting/frr:9.0.0
      binds:
        - router2/daemons:/etc/frr/daemons
        - router2/frr.conf:/etc/frr/frr.conf
    router3:
      kind: linux
      image: quay.io/frrouting/frr:9.0.0
      binds:
        - router3/daemons:/etc/frr/daemons
        - router3/frr.conf:/etc/frr/frr.conf
    PC1:
      kind: linux
      image: wbitt/network-multitool:latest
    PC2:
      kind: linux
      image: wbitt/network-multitool:latest
    PC3:
      kind: linux
      image: wbitt/network-multitool:latest

  links:
    - endpoints: ["router1:eth1", "router2:eth1"]
    - endpoints: ["router1:eth2", "router3:eth1"]
    - endpoints: ["router2:eth2", "router3:eth2"]
    - endpoints: ["PC1:eth1", "router1:eth3"]
    - endpoints: ["PC2:eth1", "router2:eth3"]
    - endpoints: ["PC3:eth1", "router3:eth3"]

#+end_src

** frr/daemons config
#+begin_src ini :tangle router1/daemons
bgpd=no
ospfd=yes
ospf6d=no
ripd=no
ripngd=no
isisd=no
pimd=no
ldpd=no
nhrpd=no
eigrpd=no
babeld=no
sharpd=no
pbrd=no
bfdd=no
fabricd=no

#
# If this option is set the /etc/init.d/frr script automatically loads
# the config via "vtysh -b" when the servers are started.
# Check /etc/pam.d/frr if you intend to use "vtysh"!
#
vtysh_enable=yes
zebra_options=" -s 90000000 --daemon -A 127.0.0.1"
bgpd_options="   --daemon -A 127.0.0.1"
ospfd_options="  --daemon -A 127.0.0.1"
ospf6d_options=" --daemon -A ::1"
ripd_options="   --daemon -A 127.0.0.1"
ripngd_options=" --daemon -A ::1"
isisd_options="  --daemon -A 127.0.0.1"
pimd_options="  --daemon -A 127.0.0.1"
ldpd_options="  --daemon -A 127.0.0.1"
nhrpd_options="  --daemon -A 127.0.0.1"
eigrpd_options="  --daemon -A 127.0.0.1"
babeld_options="  --daemon -A 127.0.0.1"
sharpd_options="  --daemon -A 127.0.0.1"
staticd_options="  --daemon -A 127.0.0.1"
pbrd_options="  --daemon -A 127.0.0.1"
bfdd_options="  --daemon -A 127.0.0.1"
fabricd_options="  --daemon -A 127.0.0.1"

#MAX_FDS=1024
# The list of daemons to watch is automatically generated by the init script.
#watchfrr_options=""

# for debugging purposes, you can specify a "wrap" command to start instead
# of starting the daemon directly, e.g. to use valgrind on ospfd:
#   ospfd_wrap="/usr/bin/valgrind"
# or you can use "all_wrap" for all daemons, e.g. to use perf record:
#   all_wrap="/usr/bin/perf record --call-graph -"
# the normal daemon command is added to this at the end.
#+end_src

#+begin_src ini :tangle router2/daemons
bgpd=no
ospfd=yes
ospf6d=no
ripd=no
ripngd=no
isisd=no
pimd=no
ldpd=no
nhrpd=no
eigrpd=no
babeld=no
sharpd=no
pbrd=no
bfdd=no
fabricd=no

#
# If this option is set the /etc/init.d/frr script automatically loads
# the config via "vtysh -b" when the servers are started.
# Check /etc/pam.d/frr if you intend to use "vtysh"!
#
vtysh_enable=yes
zebra_options=" -s 90000000 --daemon -A 127.0.0.1"
bgpd_options="   --daemon -A 127.0.0.1"
ospfd_options="  --daemon -A 127.0.0.1"
ospf6d_options=" --daemon -A ::1"
ripd_options="   --daemon -A 127.0.0.1"
ripngd_options=" --daemon -A ::1"
isisd_options="  --daemon -A 127.0.0.1"
pimd_options="  --daemon -A 127.0.0.1"
ldpd_options="  --daemon -A 127.0.0.1"
nhrpd_options="  --daemon -A 127.0.0.1"
eigrpd_options="  --daemon -A 127.0.0.1"
babeld_options="  --daemon -A 127.0.0.1"
sharpd_options="  --daemon -A 127.0.0.1"
staticd_options="  --daemon -A 127.0.0.1"
pbrd_options="  --daemon -A 127.0.0.1"
bfdd_options="  --daemon -A 127.0.0.1"
fabricd_options="  --daemon -A 127.0.0.1"

#MAX_FDS=1024
# The list of daemons to watch is automatically generated by the init script.
#watchfrr_options=""

# for debugging purposes, you can specify a "wrap" command to start instead
# of starting the daemon directly, e.g. to use valgrind on ospfd:
#   ospfd_wrap="/usr/bin/valgrind"
# or you can use "all_wrap" for all daemons, e.g. to use perf record:
#   all_wrap="/usr/bin/perf record --call-graph -"
# the normal daemon command is added to this at the end.
#+end_src

#+begin_src ini :tangle router3/daemons
bgpd=no
ospfd=yes
ospf6d=no
ripd=no
ripngd=no
isisd=no
pimd=no
ldpd=no
nhrpd=no
eigrpd=no
babeld=no
sharpd=no
pbrd=no
bfdd=no
fabricd=no

#
# If this option is set the /etc/init.d/frr script automatically loads
# the config via "vtysh -b" when the servers are started.
# Check /etc/pam.d/frr if you intend to use "vtysh"!
#
vtysh_enable=yes
zebra_options=" -s 90000000 --daemon -A 127.0.0.1"
bgpd_options="   --daemon -A 127.0.0.1"
ospfd_options="  --daemon -A 127.0.0.1"
ospf6d_options=" --daemon -A ::1"
ripd_options="   --daemon -A 127.0.0.1"
ripngd_options=" --daemon -A ::1"
isisd_options="  --daemon -A 127.0.0.1"
pimd_options="  --daemon -A 127.0.0.1"
ldpd_options="  --daemon -A 127.0.0.1"
nhrpd_options="  --daemon -A 127.0.0.1"
eigrpd_options="  --daemon -A 127.0.0.1"
babeld_options="  --daemon -A 127.0.0.1"
sharpd_options="  --daemon -A 127.0.0.1"
staticd_options="  --daemon -A 127.0.0.1"
pbrd_options="  --daemon -A 127.0.0.1"
bfdd_options="  --daemon -A 127.0.0.1"
fabricd_options="  --daemon -A 127.0.0.1"

#MAX_FDS=1024
# The list of daemons to watch is automatically generated by the init script.
#watchfrr_options=""

# for debugging purposes, you can specify a "wrap" command to start instead
# of starting the daemon directly, e.g. to use valgrind on ospfd:
#   ospfd_wrap="/usr/bin/valgrind"
# or you can use "all_wrap" for all daemons, e.g. to use perf record:
#   all_wrap="/usr/bin/perf record --call-graph -"
# the normal daemon command is added to this at the end.
#+end_src

** frr/frr.conf configuration
#+begin_src conf :tangle router1/frr.conf
frr version 9.0_git
frr defaults traditional
hostname router1
no ipv6 forwarding
!
interface eth1
 ip address 192.168.1.1/24
!
interface eth2
 ip address 192.168.2.1/24
!
interface eth3
 ip address 192.168.11.1/24
 ip ospf passive
!
interface lo
 ip address 10.10.10.1/32
!
router ospf
 network 192.168.1.0/24 area 0.0.0.0
 network 192.168.2.0/24 area 0.0.0.0
 network 192.168.11.0/24 area 0.0.0.0
!
line vty
!

#+end_src

#+begin_src conf :tangle router2/frr.conf
frr version 9.0_git
frr defaults traditional
hostname router2
no ipv6 forwarding
!
interface eth1
 ip address 192.168.1.2/24
!
interface eth2
 ip address 192.168.3.1/24
!
interface eth3
 ip address 192.168.12.1/24
 ip ospf passive
!
interface lo
 ip address 10.10.10.2/32
!
router ospf
 network 192.168.1.0/24 area 0.0.0.0
 network 192.168.3.0/24 area 0.0.0.0
 network 192.168.12.0/24 area 0.0.0.0
!
line vty
!

#+end_src

#+begin_src conf :tangle router3/frr.conf
frr version 9.0_git
frr defaults traditional
hostname router3
no ipv6 forwarding
!
interface eth1
 ip address 192.168.2.2/24
!
interface eth2
 ip address 192.168.3.2/24
!
interface eth3
 ip address 192.168.13.1/24
 ip ospf passive
!
interface lo
 ip address 10.10.10.3/32
!
router ospf
 network 192.168.2.0/24 area 0.0.0.0
 network 192.168.3.0/24 area 0.0.0.0
 network 192.168.13.0/24 area 0.0.0.0
!
line vty
!

#+end_src

** docker config
#+begin_src bash :tangle pc-interfaces.sh :shebang "#!/bin/bash"
sudo docker exec clab-frrlab-PC1 ip link set eth1 up
sudo docker exec clab-frrlab-PC1 ip addr add 192.168.11.2/24 dev eth1
sudo docker exec clab-frrlab-PC1 ip route add 192.168.0.0/16 via 192.168.11.1 dev eth1
sudo docker exec clab-frrlab-PC1 ip route add 10.10.10.0/24 via 192.168.11.1 dev eth1

sudo docker exec clab-frrlab-PC2 ip link set eth1 up
sudo docker exec clab-frrlab-PC2 ip addr add 192.168.12.2/24 dev eth1
sudo docker exec clab-frrlab-PC2 ip route add 192.168.0.0/16 via 192.168.12.1 dev eth1
sudo docker exec clab-frrlab-PC2 ip route add 10.10.10.0/24 via 192.168.12.1 dev eth1

sudo docker exec clab-frrlab-PC3 ip link set eth1 up
sudo docker exec clab-frrlab-PC3 ip addr add 192.168.13.2/24 dev eth1
sudo docker exec clab-frrlab-PC3 ip route add 192.168.0.0/16 via 192.168.13.1 dev eth1
sudo docker exec clab-frrlab-PC3 ip route add 10.10.10.0/24 via 192.168.13.1 dev eth1
#+end_src
* Run
** deploy
#+begin_src bash
sudo clab deploy
#+end_src

** verify pc1

#+caption: 检查pc1 的nic配置
#+begin_src bash
docker exec clab-frrlab-PC1 ip a
docker exec clab-frrlab-PC1 ip route
#+end_src

#+RESULTS:
#+begin_example
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
234: eth0@if235: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default
    link/ether 02:42:ac:14:14:06 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.20.20.6/24 brd 172.20.20.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 2001:172:20:20::6/64 scope global nodad
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe14:1406/64 scope link
       valid_lft forever preferred_lft forever
243: eth1@if242: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default
    link/ether aa:c1:ab:86:de:b7 brd ff:ff:ff:ff:ff:ff link-netnsid 1
    inet 192.168.11.2/24 scope global eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::a8c1:abff:fe86:deb7/64 scope link
       valid_lft forever preferred_lft forever
default via 172.20.20.1 dev eth0
10.10.10.0/24 via 192.168.11.1 dev eth1
172.20.20.0/24 dev eth0 proto kernel scope link src 172.20.20.6
192.168.0.0/16 via 192.168.11.1 dev eth1
192.168.11.0/24 dev eth1 proto kernel scope link src 192.168.11.2
#+end_example

#+caption: ping all router and pc
#+begin_src bash
echo "ping router1"
docker exec clab-frrlab-PC1 ping -c1 192.168.11.1
echo "ping router2"
docker exec clab-frrlab-PC1 ping -c1 192.168.12.1
echo "ping router3"
docker exec clab-frrlab-PC1 ping -c1 192.168.13.1
echo "ping PC2"
docker exec clab-frrlab-PC1 ping -c1 192.168.12.2
echo "ping PC3"
docker exec clab-frrlab-PC1 ping -c1 192.168.13.2
#+end_src

#+caption: ping all router's interchange ip
#+begin_src bash
docker exec clab-frrlab-PC1 ping -c1 192.168.1.1
docker exec clab-frrlab-PC1 ping -c1 192.168.1.2
docker exec clab-frrlab-PC1 ping -c1 192.168.2.1
docker exec clab-frrlab-PC1 ping -c1 192.168.2.2
docker exec clab-frrlab-PC1 ping -c1 192.168.3.1
docker exec clab-frrlab-PC1 ping -c1 192.168.3.2

#+end_src

** show duwn eth2@router1
#+begin_src bash
docker exec clab-frrlab-PC1 traceroute 192.168.13.2
#+end_src

#+RESULTS:
: traceroute to 192.168.13.2 (192.168.13.2), 30 hops max, 46 byte packets
:  1  192.168.11.1 (192.168.11.1)  0.003 ms  0.003 ms  0.003 ms
:  2  192.168.1.2 (192.168.1.2)  0.002 ms  0.003 ms  0.003 ms
:  3  192.168.3.2 (192.168.3.2)  0.003 ms  0.003 ms  0.003 ms
:  4  192.168.13.2 (192.168.13.2)  0.003 ms  0.003 ms  0.002 ms

#+begin_src bash
sudo ip netns exec clab-frrlab-router1 ip link set dev eth2 down
#+end_src

#+RESULTS:


#+begin_src bash
docker exec clab-frrlab-PC1 traceroute 192.168.13.2
#+end_src

#+RESULTS:
: traceroute to 192.168.13.2 (192.168.13.2), 30 hops max, 46 byte packets
:  1  192.168.11.1 (192.168.11.1)  0.007 ms  0.005 ms  0.004 ms
:  2  192.168.2.2 (192.168.2.2)  0.003 ms  0.005 ms  0.004 ms
:  3  192.168.13.2 (192.168.13.2)  0.004 ms  0.007 ms  0.005 ms

#+begin_src bash
sudo ip netns exec clab-frrlab-router1 ip link set dev eth2 up

#+end_src

#+RESULTS:

** verify router1
#+begin_src bash
sudo ip netns exec clab-frrlab-router1 tcpdump -U -n  -w - | wireshark -k -i -
#+end_src

#+RESULTS:

** destroy
#+begin_src bash
sudo clab destroy
#+end_src


* Topology
#+begin_src plantuml :file frr/nwdiag.png
@startuml
nwdiag {
  network net1 {
      address = "192.168.11.*/24"

      pc1 [address = "192.168.11.2/24"];
      router1 [address = "192.168.11.1/24"]
  }

  network net2 {
      address = "192.168.12.*/24"

      pc2 [address = "192.168.12.2/24"];
router2 [address = "192.168.12.1/24"];

  }
  network net3 {
      address = "192.168.13.*/24"

      pc3 [address = "192.168.13.2/24"];
      router3 [address = "192.168.13.1/24"];


  }

  network router1-2 {
    address=" 192.168.1.*/24"
    router1 [address = "192.168.1.1/24" ]
  router2 [address = "192.168.1.2/24" ]

  }

  network router1-3{
    address = "192.168.2.*/24"
    router1 [address = "192.168.2.1/24"]
    router3 [address = "192.168.2.2/24" ]
  }

  network router2-3{
    address = "192.168.3.*/24"
    router2 [address = "192.168.3.1/24"]
    router3 [address = "192.168.3.2/24"]
        }
}
@enduml
#+end_src

#+begin_src dot :file frr/frr.png :exports both
    pc1 [
		label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4">
			<tr> <td> <b>pc1</b> </td> </tr>
			<tr> <td>
				<table border="0" cellborder="0" cellspacing="0" >
					<tr> <td port="eth1" align="left" > 182.168.11.2/24</td> </tr>
				</table>
			</td> </tr>
		</table>>
    ];


    pc2 [
		label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4">
			<tr> <td> <b>pc2</b> </td> </tr>
			<tr> <td>
				<table border="0" cellborder="0" cellspacing="0" >
					<tr> <td port="eth1" align="left" > 182.168.12.2/24</td> </tr>

				</table>
			</td> </tr>
		</table>>
    ];

    pc3 [
		label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4">
			<tr> <td> <b>pc3</b> </td> </tr>
			<tr> <td>
				<table border="0" cellborder="0" cellspacing="0" >
					<tr> <td port="eth1" align="left" > 182.168.13.2/24</td> </tr>
				</table>
			</td> </tr>
		</table>>
    ];

    router1 [
		label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4">
			<tr> <td> <b>router1</b> </td> </tr>
			<tr> <td>
				<table border="0" cellborder="0" cellspacing="0" >
					<tr><td port="eth1">eth1</td> <td  align="left" > 192.168.1.1/24</td> </tr>
                    <tr><td port="eth2">eth2</td> <td  align="left" > 192.168.2.1/24</td> </tr>
                    <tr><td port="eth3">eth3</td> <td  align="left" > 192.168.11.1/24</td> </tr>
                    <tr><td port="lo">   lo</td>  <td  align="left" > 10.10.10.1/32</td> </tr>

				</table>
			</td> </tr>
		</table>>
    ];
    router2 [
		label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4">
			<tr> <td> <b>router2</b> </td> </tr>
			<tr> <td>
				<table border="0" cellborder="0" cellspacing="0" >
					<tr><td port="eth1">eth1</td> <td  align="left" > 192.168.1.2/24</td> </tr>
                    <tr><td port="eth2">eth2</td> <td  align="left" > 192.168.3.1/24</td> </tr>
                    <tr><td port="eth3">eth3</td> <td  align="left" > 192.168.12.1/24</td> </tr>
                    <tr><td port="lo">   lo</td>  <td  align="left" > 10.10.10.2/32</td> </tr>

				</table>
			</td> </tr>
		</table>>
    ];
    router3 [
		label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4">
			<tr> <td> <b>router3</b> </td> </tr>
			<tr> <td>
				<table border="0" cellborder="0" cellspacing="0" >
					<tr><td port="eth1">eth1</td> <td  align="left" > 192.168.2.2/24</td> </tr>
                    <tr><td port="eth2">eth2</td> <td  align="left" > 192.168.3.2/24</td> </tr>
                    <tr><td port="eth3">eth3</td> <td  align="left" > 192.168.13.1/24</td> </tr>
                    <tr><td port="lo">   lo</td>  <td  align="left" > 10.10.10.3/32</td> </tr>

				</table>
			</td> </tr>
		</table>>
    ];

{rank=same; pc1 -> pc2 -> pc3};
{rank=same; router1 -> router2 -> router3}

   pc1:eth1 -> router1:eth3
   pc2:eth1 -> router2:eth3
   pc3:eth1 -> router3:eth3

   router1:eth1 -> router2:eth1
   router1:eth2 -> router3:eth1
   router2:eth2 -> router3:eth2
}

#+end_src
